import React, { useContext, useEffect, useState } from "react";
import { useNavigate, useLocation, useSearchParams } from "react-router-dom";
import { Card, OverlayTrigger, Tooltip } from "react-bootstrap";
import { GrLocation } from "react-icons/gr";
import { HeaderOnlyError } from "components/Error/HeaderOnlyError";
import { BehaviorBiometricsPerFlow, DeviceProfile, AnyTodo } from "sardine-dashboard-typescript-definitions";
import { DeviceProfileHit } from "utils/api_response/deviceResponse";
import BehaviorBiometrics from "components/BehaviorBiometrics";
import { replaceAllUnderscoresWithSpaces } from "utils/stringUtils";
import { RULE_DETAILS_PATH, SEARCH_PARAM_KEYS } from "modulePaths";
import { captureException } from "utils/errorUtils";
import { selectIsSuperAdmin, useUserStore } from "store/user";
import Layout from "../components/Layout/Main";
import Loader from "../components/Common/Loader";
import { CustomerProfileLink, Link } from "../components/Common/Links";
import { StoreCtx } from "../utils/store";
import { StyledNavTitle, StyledStickyNav, StyledTitleName } from "../components/Dashboard/styles";
import { StyledMainDiv, InputGroupWrapper, PinContainer } from "../components/FraudScore/styles";
import { ActionTypes } from "../utils/store/actionTypes";
import { fetchDeviceProfile } from "../utils/api";
import { FraudListProps } from "../utils/store/interface";
import { DetailsHeaderParent, BorderHide, StyledTableCell, StyledCard, DetailsHeaderChild, DetailsHeaderValue, DetailsHeaderTile } from "../components/Customers/styles";
import CircularRiskLevel from "../components/Common/CircularRiskLevel";
import Badge from "../components/Common/Badge";
import ExecutedRulesList from "../components/Common/ExecutedRulesList";
import { useGetFallbackHistoryState } from "../utils/openUrlNewTabWithHistoryState";
import { getSourceFromQueryParams } from "../components/FraudScore";
import { getClientFromQueryParams } from "../utils/getClientFromQueryParams";
import { CLIENT_ID_QUERY_FIELD } from "../utils/constructFiltersQueryParams";

const PARAM_KEYS = SEARCH_PARAM_KEYS[RULE_DETAILS_PATH];

interface StateData {
  data: AnyTodo;
  payload: AnyTodo;
}

interface DefinitionObject {
  key: string;
  value: { [key: string]: string };
}

interface DeviceObject {
  name: string;
  value: FeatureObject[];
}

interface FeatureObject {
  name: string;
  description: string;
  value: AnyTodo;
}

const QUERY_PARAMS_SESSION_KEY = "session";

function getSessionKeyFromQueryParams(pathSearch: string): string {
  const searchParams = new URLSearchParams(pathSearch);
  const sessionKey: string | null = searchParams.get(QUERY_PARAMS_SESSION_KEY);
  if (sessionKey === null) {
    return "";
  }
  return sessionKey;
}

const DeviceView: React.FC = () => {
  const { dispatch } = useContext(StoreCtx);
  const navigate = useNavigate();
  const [deviceData, setDeviceData] = useState<DeviceObject[]>([]);
  const [userId, setUserId] = useState("");
  const [session_key, setSessionKey] = useState("");
  const [sessionRisk, setSessionRisk] = useState("");
  const [createdAt, setCreatedAt] = useState("");
  const [clientID, setClientID] = useState("");
  const [isDataLoaded, setIsDataLoaded] = useState(false);
  const [listPayload, setListPayload] = useState<FraudListProps>();

  const { organisationFromUserStore, isSuperAdmin, setUserStoreOrganisation } = useUserStore((state) => {
    const { organisation, setUserStoreOrganisation } = state;
    return {
      organisationFromUserStore: organisation,
      isSuperAdmin: selectIsSuperAdmin(state),
      setUserStoreOrganisation,
    };
  });

  const { search } = useLocation();
  const [searchPath] = useSearchParams();
  const [behaviorBiometrics, setBehaviorBiometrics] = useState<Array<BehaviorBiometricsPerFlow>>([]);
  const details = useGetFallbackHistoryState<StateData>();
  const sessionKeyFromQP = getSessionKeyFromQueryParams(search);
  const dbSource = getSourceFromQueryParams(search, isSuperAdmin);

  const organisation = getClientFromQueryParams(search, isSuperAdmin, organisationFromUserStore);
  const clientIdFromQP = searchPath.get(CLIENT_ID_QUERY_FIELD);

  const featuresWithLevel = ["device_reputation", "proxy", "vpn", "os_anomaly", "session_risk"];
  const definitions: DefinitionObject[] = [
    {
      key: "Device Details",
      value: {
        browser: "Browser used for the session",
        created_at: "Date when device was first seen",
        device_id: "ID of the device generated by sardine SDK",
        device_reputation: "Reputation of device based on IP address history and fraud feedback data",
        emulator: "If device is a mobile emulator like BlueStacks",
        fingerprint_id: "Fingerprint of the device by Sardine SDK.",
        confidence_score: "Confidence Score of the fingerprint",
        remote_software: "Status of remote desktop active or not. Like TeamViwer, Anydesk, Zoom etc",
        screen_resolution: "Screen resolution of the device",
        rooted: "If device is rooted",
        device_model: "Device model",
        behavior_biometric_level: "Risk level calculated from Behavior biometrics",
        device_age_hours: "Device age in hours from first seen",
      },
    },
    {
      key: "Executed Rules",
      value: {},
    },
    {
      key: "Network Details",
      value: {
        ip_address: "The last IP address seen in the session",
        ip_type: "Type of IP like Corporate, Fixed Line ISP",
        vpn: "Whether connection is from VPN",
        proxy: "Whether connection is from Proxy",
        city: "City from IP Address",
        region: "Region from IP Address",
        country: "Country from IP Address",
        location: "Location of the device (Longitude, Latitude)",
      },
    },
    {
      key: "OS Details",
      value: {
        os: "OS installed in device",
        os_anomaly: "Is  there an anomaly between TrueOS and OS?",
        true_os: "True OS (eg if user use Android emulator on Mac OS, trueOS would be 'Mac/iOS')",
      },
    },
  ];

  window.onpopstate = () => {
    if (listPayload) {
      dispatch({
        type: ActionTypes.FRAUD_SCORE_LIST,
        payload: listPayload as AnyTodo,
      });

      if (listPayload.organisation) {
        setUserStoreOrganisation(listPayload.organisation);
      }

      if (listPayload.dates) {
        dispatch({ type: ActionTypes.CHANGE_SELECTED_DATES_DATA, payload: listPayload.dates });
      }
    }
  };

  if (session_key === "") {
    if (sessionKeyFromQP !== "") {
      setSessionKey(sessionKeyFromQP);
    }
  }

  useEffect(() => {
    function setUpData(d: DeviceProfile) {
      if (d) {
        setUserId(d.user_id_hash);
        setSessionKey(d.session_key || "-");
        setCreatedAt(d.created_at.split(" ")[0] || "");
        setClientID(d.client_id || "");
        setSessionRisk(d.session_risk || "");

        setIsDataLoaded(true);

        const data: DeviceObject[] = definitions.map((def) => {
          const name = def.key;
          const value = Object.entries(def.value);
          if (name === "Executed Rules") {
            value.sort();
          }
          const deviceProfile = d as AnyTodo;

          return {
            name,
            value: value
              .filter((_d) => deviceProfile[_d[0]] !== undefined)
              .map((_d) => ({
                name: _d[0],
                description: _d[1],
                value: deviceProfile[_d[0]],
              })),
          };
        });

        if (d.behavior_biometrics) {
          setBehaviorBiometrics(d.behavior_biometrics);
        }

        setDeviceData(data);
      }
    }

    async function fetchData() {
      const { result } = await fetchDeviceProfile({
        organisation,
        sessionKey: session_key,
        source: dbSource,
        clientId: clientIdFromQP,
      });
      setIsDataLoaded(true);

      const { hits, profile } = result;

      if (profile) {
        setUpData(profile);
      } else if (hits && Array.isArray(hits.hits)) {
        const data: Array<DeviceProfile> = hits.hits.map((item: DeviceProfileHit) => item._source);
        if (data.length > 0) {
          setUpData(data[0]);
        }
      }
    }

    if (!isDataLoaded) {
      if (details) {
        const d = details.data;

        if (d) {
          if (userId.length === 0) {
            setUpData(d);
          } else if (userId !== d.user_id_hash) {
            fetchData()
              .then()
              .catch((e) => captureException(e));
          }
        }

        if (details.payload) {
          setListPayload(details.payload);
        }
      } else {
        setSessionKey(searchPath.get("session") || "");
        setUserId(searchPath.get("userId") || "");

        // Timeout to set session & user id
        setTimeout(fetchData, 100);
      }
    }
  }, [isDataLoaded]);

  if (isDataLoaded && !deviceData.length) {
    return (
      <HeaderOnlyError
        header={
          <>
            No device data found for the session <div className="text-blue">{sessionKeyFromQP}</div>{" "}
          </>
        }
      />
    );
  }

  return (
    <Layout>
      {isDataLoaded ? (
        <StyledMainDiv>
          <StyledStickyNav
            id="device-info"
            style={{
              width: "inherit",
              margin: 10,
              justifyContent: "space-between",
              display: "flex",
            }}
          >
            <StyledNavTitle style={{ width: "100%" }}>
              <StyledTitleName id="page_title" style={{ fontSize: 20 }}>
                {"< Device Intelligence "}<span style={{ fontWeight: "bold" }}>{"/ Device Details"}</span>
              </StyledTitleName>
            </StyledNavTitle>
          </StyledStickyNav>
          <InputGroupWrapper style={{ width: "inherit" }}>
            <div style={{ width: "100%", margin: "10px 10px" }}>
              <DetailsHeaderParent>
                <DetailsHeaderChild>
                  <DetailsHeaderValue id="risk_level_value">
                    <CircularRiskLevel risk_level={sessionRisk} />
                  </DetailsHeaderValue>
                </DetailsHeaderChild>
                <DetailsHeaderParent>
                  <DetailsHeaderChild>
                    <DetailsHeaderTile id="user_id_title">UserID</DetailsHeaderTile>
                    <DetailsHeaderValue id="user_id_value">
                      {userId ? <CustomerProfileLink clientId={clientID} customerId={userId} text={userId} /> : "-"}
                    </DetailsHeaderValue>
                  </DetailsHeaderChild>
                  <DetailsHeaderChild>
                    <DetailsHeaderTile id="session_key_title">Session Key</DetailsHeaderTile>
                    <DetailsHeaderValue id="session_key_value"> {session_key || "-"} </DetailsHeaderValue>
                  </DetailsHeaderChild>
                </DetailsHeaderParent>
              </DetailsHeaderParent>
            </div>
          </InputGroupWrapper>
          <br />
          <PinContainer style={{ marginBottom: 30 }}>
            {deviceData.map((data) => (
              <StyledCard style={{ marginTop: 15 }} key={data.name}>
                <Card.Header id={`header_${data.name}`} style={{ color: "var(--dark-14)" }}>
                  {data.name.toLowerCase().includes("device") ? (
                    <>
                      <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M26 24.005H6C5.46973 24.0045 4.96133 23.7936 4.58637 23.4186C4.21141 23.0437 4.00053 22.5353 4 22.005V8.005C4.00053 7.47473 4.21141 6.96633 4.58637 6.59138C4.96133 6.21642 5.46973 6.00553 6 6.005H26C26.5303 6.00553 27.0387 6.21642 27.4136 6.59138C27.7886 6.96633 27.9995 7.47473 28 8.005V22.005C27.9992 22.5352 27.7882 23.0434 27.4133 23.4183C27.0384 23.7932 26.5302 24.0042 26 24.005ZM6 8.005V22.005H26V8.005H6Z" fill="#141A39"/>
                        <path d="M2 26.005H30V28.005H2V26.005Z" fill="#141A39"/>
                      </svg>
                      <span>{data.name}</span>
                    </>
                  ) : data.name.toLowerCase().includes("rules") ? (
                    <>
                      <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M25.9994 18C25.115 18.0026 24.2564 18.2986 23.5583 18.8415C22.8601 19.3844 22.3618 20.1435 22.1414 21H16.9994V11H22.1414C22.3848 11.9427 22.9636 12.7642 23.7694 13.3106C24.5751 13.857 25.5525 14.0908 26.5184 13.9681C27.4842 13.8455 28.3721 13.3747 29.0157 12.6442C29.6593 11.9137 30.0143 10.9736 30.0143 10C30.0143 9.02644 29.6593 8.08628 29.0157 7.35578C28.3721 6.62527 27.4842 6.15457 26.5184 6.03189C25.5525 5.90922 24.5751 6.143 23.7694 6.68941C22.9636 7.23582 22.3848 8.05735 22.1414 9.00001H16.9994C16.4691 9.00054 15.9607 9.21142 15.5857 9.58638C15.2108 9.96134 14.9999 10.4697 14.9994 11V15H9.85736C9.61396 14.0574 9.03513 13.2358 8.22935 12.6894C7.42357 12.143 6.44617 11.9092 5.48036 12.0319C4.51454 12.1546 3.62662 12.6253 2.98304 13.3558C2.33945 14.0863 1.98438 15.0264 1.98438 16C1.98438 16.9736 2.33945 17.9137 2.98304 18.6442C3.62662 19.3747 4.51454 19.8455 5.48036 19.9681C6.44617 20.0908 7.42357 19.857 8.22935 19.3106C9.03513 18.7642 9.61396 17.9427 9.85736 17H14.9994V21C14.9999 21.5303 15.2108 22.0387 15.5857 22.4136C15.9607 22.7886 16.4691 22.9995 16.9994 23H22.1414C22.3297 23.7226 22.7168 24.3778 23.2588 24.8914C23.8008 25.405 24.476 25.7564 25.2076 25.9055C25.9393 26.0547 26.6981 25.9957 27.3979 25.7353C28.0977 25.4749 28.7105 25.0235 29.1666 24.4323C29.6228 23.8411 29.904 23.1339 29.9784 22.3909C30.0528 21.6479 29.9174 20.899 29.5876 20.2291C29.2577 19.5592 28.7466 18.9952 28.1124 18.6012C27.4781 18.2072 26.7461 17.9989 25.9994 18ZM25.9994 8.00001C26.3949 8.00001 26.7816 8.11731 27.1105 8.33707C27.4394 8.55683 27.6957 8.86919 27.8471 9.23464C27.9985 9.6001 28.0381 10.0022 27.9609 10.3902C27.8838 10.7782 27.6933 11.1345 27.4136 11.4142C27.1339 11.6939 26.7775 11.8844 26.3895 11.9616C26.0016 12.0388 25.5994 11.9991 25.234 11.8478C24.8685 11.6964 24.5562 11.44 24.3364 11.1111C24.1167 10.7823 23.9994 10.3956 23.9994 10C23.9999 9.46974 24.2108 8.96134 24.5857 8.58638C24.9607 8.21142 25.4691 8.00054 25.9994 8.00001ZM5.99936 18C5.6038 18 5.21712 17.8827 4.88822 17.6629C4.55932 17.4432 4.30297 17.1308 4.1516 16.7654C4.00022 16.3999 3.96062 15.9978 4.03779 15.6098C4.11496 15.2219 4.30544 14.8655 4.58514 14.5858C4.86485 14.3061 5.22122 14.1156 5.60918 14.0384C5.99714 13.9613 6.39927 14.0009 6.76473 14.1523C7.13018 14.3036 7.44253 14.56 7.6623 14.8889C7.88206 15.2178 7.99936 15.6044 7.99936 16C7.99883 16.5303 7.78794 17.0387 7.41299 17.4136C7.03803 17.7886 6.52963 17.9995 5.99936 18ZM25.9994 24C25.6038 24 25.2171 23.8827 24.8882 23.6629C24.5593 23.4432 24.303 23.1308 24.1516 22.7654C24.0002 22.3999 23.9606 21.9978 24.0378 21.6098C24.115 21.2219 24.3054 20.8655 24.5851 20.5858C24.8649 20.3061 25.2212 20.1156 25.6092 20.0384C25.9971 19.9613 26.3993 20.0009 26.7647 20.1523C27.1302 20.3036 27.4425 20.56 27.6623 20.8889C27.8821 21.2178 27.9994 21.6044 27.9994 22C27.9988 22.5303 27.7879 23.0387 27.413 23.4136C27.038 23.7886 26.5296 23.9995 25.9994 24Z" fill="#141A39"/>
                      </svg>
                      <span>{data.name}</span>
                    </>
                  ) : data.name.toLowerCase().includes("network") ? (
                    <>
                      <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 7C9.55228 7 10 6.55228 10 6C10 5.44772 9.55228 5 9 5C8.44772 5 8 5.44772 8 6C8 6.55228 8.44772 7 9 7Z" fill="#141A39"/>
                        <path d="M26 2H6C5.46957 2 4.96086 2.21071 4.58579 2.58579C4.21071 2.96086 4 3.46957 4 4V8C4 8.53043 4.21071 9.03914 4.58579 9.41421C4.96086 9.78929 5.46957 10 6 10H15V14H17V10H26C26.5304 10 27.0391 9.78929 27.4142 9.41421C27.7893 9.03914 28 8.53043 28 8V4C28 3.46957 27.7893 2.96086 27.4142 2.58579C27.0391 2.21071 26.5304 2 26 2ZM26 8H6V4H26V8Z" fill="#141A39"/>
                        <path d="M17 28V26H15V28H4V30H28V28H17Z" fill="#141A39"/>
                        <path d="M9 21C9.55228 21 10 20.5523 10 20C10 19.4477 9.55228 19 9 19C8.44772 19 8 19.4477 8 20C8 20.5523 8.44772 21 9 21Z" fill="#141A39"/>
                        <path d="M6 24H26C26.5304 24 27.0391 23.7893 27.4142 23.4142C27.7893 23.0391 28 22.5304 28 22V18C28 17.4696 27.7893 16.9609 27.4142 16.5858C27.0391 16.2107 26.5304 16 26 16H6C5.46957 16 4.96086 16.2107 4.58579 16.5858C4.21071 16.9609 4 17.4696 4 18V22C4 22.5304 4.21071 23.0391 4.58579 23.4142C4.96086 23.7893 5.46957 24 6 24ZM6 18H26V22H6V18Z" fill="#141A39"/>
                      </svg>
                      <span>{data.name}</span>
                    </>
                  ): (
                    <>
                      <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M26 4.01001H6C5.46957 4.01001 4.96086 4.22072 4.58579 4.5958C4.21071 4.97087 4 5.47958 4 6.01001V26.01C4 26.5404 4.21071 27.0492 4.58579 27.4242C4.96086 27.7993 5.46957 28.01 6 28.01H26C26.5304 28.01 27.0391 27.7993 27.4142 27.4242C27.7893 27.0492 28 26.5404 28 26.01V6.01001C28 5.47958 27.7893 4.97087 27.4142 4.5958C27.0391 4.22072 26.5304 4.01001 26 4.01001ZM26 6.01001V10.01H6V6.01001H26ZM6 26.01V12.01H26V26.01H6Z" fill="#141A39"/>
                        <path d="M10.7598 16.18L13.5798 19.01L10.7598 21.84L12.1698 23.25L16.4098 19.01L12.1698 14.77L10.7598 16.18Z" fill="#141A39"/>
                      </svg>
                      <span>{data.name}</span>
                    </>
                  )}
                </Card.Header>
                {data.name.toLowerCase().includes("rules") ? (
                  <Card.Body>
                    <ExecutedRulesList
                      sessionKey={session_key}
                      date={createdAt}
                      clientID={clientID}
                      onClick={(id) => {
                        navigate(`${RULE_DETAILS_PATH}?${PARAM_KEYS.RULE_ID}=${id}&${PARAM_KEYS.CLIENT_ID}=${clientID}`);
                      }}
                    />
                    <BorderHide />
                  </Card.Body>
                ) : (
                  <Card.Body>
                    {data.value.map((d) => (
                      <div key={d.name} className="grid-view">
                        <OverlayTrigger placement="top" overlay={<Tooltip id={d.name}> {d.description} </Tooltip>}>
                          <div
                            style={{
                              display: "flex",
                              alignItems: "center",
                            }}
                          >
                            <Card.Title
                              style={{
                                fontSize: 14,
                                marginBottom: 5,
                                textTransform: "capitalize",
                                color: "#ABA69A",
                                fontWeight: "normal"
                              }}
                              className="font-weight-normal"
                              id={`${d.name}_title`}
                            >
                              {replaceAllUnderscoresWithSpaces(d.name)}{" "}
                            </Card.Title>
                          </div>
                        </OverlayTrigger>
                        <div id={`${d.name}_value`} style={{ fontSize: 14, lineBreak: "anywhere" }}>
                          {d.name.includes("location") && Object.entries(d.value).length > 0 ? (
                            <Link
                              id={`link_${d.name}`}
                              href={`https://www.google.com/maps/search/?api=1&query=${d.value.lat},${d.value.lon}`}
                            >
                              <StyledTableCell>
                                <GrLocation />
                                <span>{`${d.value.lat.toFixed(2)}, ${d.value.lon.toFixed(2)}`}</span>
                              </StyledTableCell>
                            </Link>
                          ) : d.name.includes("referrer") ? (
                            <Link id={`link_${d.name}`} href={d.value}>
                              {d.value}
                            </Link>
                          ) : featuresWithLevel.includes(d.name) ? (
                            <Badge title={d.value.toString()} style={{ marginLeft: -10, marginTop: 5 }} />
                          ) : (
                            d.value.toString() || "-"
                          )}{" "}
                        </div>
                      </div>
                    ))}
                    <BorderHide />
                  </Card.Body>
                )}
              </StyledCard>
            ))}
          </PinContainer>
          <BehaviorBiometrics behavior_biometrics={behaviorBiometrics} />
        </StyledMainDiv>
      ) : (
        <Loader />
      )}
    </Layout>
  );
};

export default DeviceView;
