import { arrayCustomerCheckpoints, FeatureItem, intChild, newChild, boolChild, DATA_TYPES } from "../featureItem";

export const getDeviceFeatures = (checkpoint: string): FeatureItem[] =>
  [
    newChild("ID", "03bbe826-4201-438f-ac25-916ccb7f0952", DATA_TYPES.string, "ID of the device generated by sardine SDK", false),
    newChild(
      "TransientDeviceID",
      "02BB-CCFF-FEDD-1122",
      DATA_TYPES.string,
      "Transient unique ID of the device generated by sardine SDK",
      false
    ),
    new FeatureItem("TransientDeviceIDAggFeatures", [
      intChild("CountEmails", "number of emails (across sardine network) associated with the transient device ID", false),
      intChild("CountPhones", "number of phone numbers (across sardine network) associated with the transient device ID", false),
      intChild("CountCities", "number of cities (across sardine network) associated with the transient device ID", false),
      intChild("CountCustomerIDs", "number of customers (across sardine network) associated with the transient device ID", false),
      intChild("CountCountries", "number of countries (across sardine network) associated with the transient device ID", false),
      intChild(
        "CountFirstNames",
        "number of first names (across sardine network) associated with the transient device ID",
        false
      ),
      intChild("CountLastNames", "number of last names (across sardine network) associated with the transient device ID", false),
      intChild("CountRegions", "number of states (across sardine network) associated with the transient device ID", false),
    ]),
    newChild("Fingerprint", "03bbe826-4201-438f-ac25-916ccb7f0952", DATA_TYPES.string, "Fingerprint of the device.", false),
    newChild("FingerprintConfidence", "80", DATA_TYPES.int, "Confidence Score of the fingerprint", false),
    newChild(
      "AccountDeviceId",
      "0987acd8-4201-438f-ac25-916ccb7f0952",
      DATA_TYPES.string,
      "Persistent account device ID for device.",
      false
    ),
    newChild("Language", "en-US", DATA_TYPES.string, "Browser or device language", false),
    newChild("Browser", "Chrome", DATA_TYPES.string, "Browser", false),
    newChild("OS", "iOS", DATA_TYPES.string, "OS", false),
    newChild(
      "TrueOS",
      "Mac/iOS",
      DATA_TYPES.string,
      "True OS (eg if user use Android emulator on Mac OS, trueOS would be 'Mac/iOS')",
      false
    ),
    newChild("Model", "SM-G960W", DATA_TYPES.string, "Model of the device", false),
    boolChild("IsEmulator", "If device is a mobile emulator like BlueStacks", false),
    boolChild("IsRooted", "If device is rooted", false),
    newChild(
      "Reputation",
      "80",
      DATA_TYPES.string,
      "Reputation of device based on IP address history and fraud feedback data",
      false
    ),
    boolChild("IsBlocklisted", "device ID is blocklisted by you", false),
    boolChild("IsBlocklistedByNetwork", "device ID is blocklisted by any merchant in sardine network", false),
    boolChild("IsFraudulent", "Reported as fraudulent via /feedback API by any of merchant in sardine network", false),
    boolChild("IsAllowlisted", "User is allowlisted"),
    newChild("RiskLevel", "85", DATA_TYPES.int, "RiskLevel  of the current session"),
    newChild("FraudScore", "90", DATA_TYPES.int, "Users Fraud Score returned in Device API via our machine learning model"),
    intChild(
      "DistanceIPGps",
      "Distance in miles between IP address and GPS address city (available only if you integrate sardine's mobile SDKs)"
    ),
    intChild("DistanceBssidIP", "Distance between BSSID and IP"),
    newChild("FirstSeenAt", "1617137009018", DATA_TYPES.int, "Time in unix timestamp when the device was first seen", false),
    newChild(
      "CountEmails",
      "2",
      DATA_TYPES.int,
      "Number of unique emails (across sardine network) associated with this device-id",
      false
    ),
    newChild(
      "CountPhones",
      "2",
      DATA_TYPES.int,
      "Number of unique phone numbers (across sardine network) associated with this device-id",
      false
    ),
    newChild(
      "CountCities",
      "2",
      DATA_TYPES.int,
      "Number of unique cities (across sardine network) used in the addresses from this device-id",
      false
    ),
    newChild(
      "CountCustomerIDs",
      "2",
      DATA_TYPES.int,
      "Number of unique customer accounts (across sardine network) associated with this device-id",
      false
    ),
    newChild(
      "CountFirstNames",
      "2",
      DATA_TYPES.int,
      "Number of unique first names (across sardine network) in the addresses associated with this device-id",
      false
    ),
    newChild(
      "CountLastNames",
      "2",
      DATA_TYPES.int,
      "Number of unique last names (across sardine network) in the addresses associated with this device-id",
      false
    ),
    newChild(
      "CountCountries",
      "2",
      DATA_TYPES.int,
      "Number of unique countries (across sardine network) in the addresses associated with this device-id",
      false
    ),
    newChild(
      "CountStates",
      "2",
      DATA_TYPES.int,
      "Number of unique states / region codes (across sardine network) in the addresses associated with this device-id",
      false
    ),
    intChild("CountUsers", "Count of users (across sardine network, sent to sardine APIs) associated with this Device", false),
    intChild("CountIPs", "Count of Any IP addresses associated with the device", false),
    intChild("CountStaticIPs", "Count of Home (eg Comcast)/ Static IP associated with the device", false),
  ].concat(
    arrayCustomerCheckpoints.includes(checkpoint.toLowerCase())
      ? [
          intChild("CountEmails", "Count of emails associated with the device"),
          intChild("CountPhones", "Count of phone numbers associated with the device"),
        ]
      : []
  );
